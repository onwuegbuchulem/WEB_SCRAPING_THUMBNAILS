 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Many applications use a mix of several languages in their construction and use.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Different programming languages support different styles of programming (called programming paradigms).
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Programs were mostly entered using punched cards or paper tape.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 It is very difficult to determine what are the most popular modern programming languages.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).