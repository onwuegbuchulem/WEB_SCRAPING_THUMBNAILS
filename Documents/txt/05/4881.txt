This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Different programming languages support different styles of programming (called programming paradigms).
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 It is very difficult to determine what are the most popular modern programming languages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.