Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Techniques like Code refactoring can enhance readability.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 Programmable devices have existed for centuries.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.