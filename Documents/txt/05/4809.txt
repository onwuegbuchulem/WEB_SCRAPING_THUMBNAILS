 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
One approach popular for requirements analysis is Use Case analysis.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Scripting and breakpointing is also part of this process.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
There are many approaches to the Software development process.

 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.