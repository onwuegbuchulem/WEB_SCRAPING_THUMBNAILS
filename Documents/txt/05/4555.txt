 Different programming languages support different styles of programming (called programming paradigms).
Integrated development environments (IDEs) aim to integrate all such help.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Use of a static code analysis tool can help detect some possible problems.
It is usually easier to code in "high-level" languages than in "low-level" ones.