 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Following a consistent programming style often helps readability.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Scripting and breakpointing is also part of this process.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.