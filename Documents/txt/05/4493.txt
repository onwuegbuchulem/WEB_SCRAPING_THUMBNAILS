 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
There are many approaches to the Software development process.
However, readability is more than just programming style.
Many applications use a mix of several languages in their construction and use.

Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.