 It is very difficult to determine what are the most popular modern programming languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Many applications use a mix of several languages in their construction and use.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Different programming languages support different styles of programming (called programming paradigms).
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Programs were mostly entered using punched cards or paper tape.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.