Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Code-breaking algorithms have also existed for centuries.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Many applications use a mix of several languages in their construction and use.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Techniques like Code refactoring can enhance readability.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.