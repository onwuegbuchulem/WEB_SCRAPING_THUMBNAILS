Unreadable code often leads to bugs, inefficiencies, and duplicated code.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
One approach popular for requirements analysis is Use Case analysis.
Programming languages are essential for software development.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.