The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
 Programmable devices have existed for centuries.

Programming languages are essential for software development.
 Code-breaking algorithms have also existed for centuries.
Techniques like Code refactoring can enhance readability.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Programs were mostly entered using punched cards or paper tape.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Many applications use a mix of several languages in their construction and use.
One approach popular for requirements analysis is Use Case analysis.