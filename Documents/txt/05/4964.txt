The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.

It affects the aspects of quality above, including portability, usability and most importantly maintainability.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Normally the first step in debugging is to attempt to reproduce the problem.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Many applications use a mix of several languages in their construction and use.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Programmable devices have existed for centuries.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Techniques like Code refactoring can enhance readability.