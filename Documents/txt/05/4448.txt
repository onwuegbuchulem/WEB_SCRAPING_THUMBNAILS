
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
However, readability is more than just programming style.
There are many approaches to the Software development process.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Programming languages are essential for software development.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Different programming languages support different styles of programming (called programming paradigms).
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Use of a static code analysis tool can help detect some possible problems.