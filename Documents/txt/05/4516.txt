 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Integrated development environments (IDEs) aim to integrate all such help.
Techniques like Code refactoring can enhance readability.
 Code-breaking algorithms have also existed for centuries.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Programs were mostly entered using punched cards or paper tape.
 Following a consistent programming style often helps readability.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).