Ideally, the programming language best suited for the task at hand will be selected.
 Computer programmers are those who write computer software.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Programs were mostly entered using punched cards or paper tape.
 Different programming languages support different styles of programming (called programming paradigms).
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.