
The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Code-breaking algorithms have also existed for centuries.
 It is very difficult to determine what are the most popular modern programming languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
However, readability is more than just programming style.
 Programmable devices have existed for centuries.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.