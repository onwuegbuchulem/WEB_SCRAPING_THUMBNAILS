It affects the aspects of quality above, including portability, usability and most importantly maintainability.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Programs were mostly entered using punched cards or paper tape.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Use of a static code analysis tool can help detect some possible problems.
One approach popular for requirements analysis is Use Case analysis.
Integrated development environments (IDEs) aim to integrate all such help.
 Code-breaking algorithms have also existed for centuries.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.