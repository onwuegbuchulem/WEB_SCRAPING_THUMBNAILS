However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
There exist a lot of different approaches for each of those tasks.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Ideally, the programming language best suited for the task at hand will be selected.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.

 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.