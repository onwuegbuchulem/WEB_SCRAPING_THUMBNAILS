Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
However, readability is more than just programming style.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.