Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Techniques like Code refactoring can enhance readability.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 Programmable devices have existed for centuries.

 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.