For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
It is usually easier to code in "high-level" languages than in "low-level" ones.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Ideally, the programming language best suited for the task at hand will be selected.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Many applications use a mix of several languages in their construction and use.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.