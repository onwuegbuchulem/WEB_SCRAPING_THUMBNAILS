
The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
However, readability is more than just programming style.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Scripting and breakpointing is also part of this process.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
One approach popular for requirements analysis is Use Case analysis.