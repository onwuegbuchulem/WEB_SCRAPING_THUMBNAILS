 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Many applications use a mix of several languages in their construction and use.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Following a consistent programming style often helps readability.