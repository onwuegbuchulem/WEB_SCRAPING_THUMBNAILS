As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Code-breaking algorithms have also existed for centuries.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 Programs were mostly entered using punched cards or paper tape.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.