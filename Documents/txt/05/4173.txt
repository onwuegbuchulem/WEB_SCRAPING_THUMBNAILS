While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
It is usually easier to code in "high-level" languages than in "low-level" ones.
Ideally, the programming language best suited for the task at hand will be selected.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
Normally the first step in debugging is to attempt to reproduce the problem.