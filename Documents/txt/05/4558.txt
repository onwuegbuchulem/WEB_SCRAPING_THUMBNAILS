A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Normally the first step in debugging is to attempt to reproduce the problem.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
There exist a lot of different approaches for each of those tasks.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
One approach popular for requirements analysis is Use Case analysis.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.