 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Techniques like Code refactoring can enhance readability.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
There exist a lot of different approaches for each of those tasks.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
It is usually easier to code in "high-level" languages than in "low-level" ones.