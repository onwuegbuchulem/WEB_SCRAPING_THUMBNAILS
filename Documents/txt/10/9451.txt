For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Programs were mostly entered using punched cards or paper tape.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
However, readability is more than just programming style.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
One approach popular for requirements analysis is Use Case analysis.
Ideally, the programming language best suited for the task at hand will be selected.
 Following a consistent programming style often helps readability.
There are many approaches to the Software development process.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.