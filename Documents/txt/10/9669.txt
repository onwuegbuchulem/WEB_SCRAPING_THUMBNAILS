 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Techniques like Code refactoring can enhance readability.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Use of a static code analysis tool can help detect some possible problems.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Scripting and breakpointing is also part of this process.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Programming languages are essential for software development.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.