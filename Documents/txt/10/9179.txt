 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Different programming languages support different styles of programming (called programming paradigms).
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Programmable devices have existed for centuries.
There are many approaches to the Software development process.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Programs were mostly entered using punched cards or paper tape.

Techniques like Code refactoring can enhance readability.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.