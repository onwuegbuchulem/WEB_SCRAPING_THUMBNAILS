 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
However, readability is more than just programming style.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.