Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Programs were mostly entered using punched cards or paper tape.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Scripting and breakpointing is also part of this process.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Programming languages are essential for software development.