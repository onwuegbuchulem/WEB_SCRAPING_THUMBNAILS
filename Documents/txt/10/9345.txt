 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Scripting and breakpointing is also part of this process.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Normally the first step in debugging is to attempt to reproduce the problem.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 Code-breaking algorithms have also existed for centuries.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.