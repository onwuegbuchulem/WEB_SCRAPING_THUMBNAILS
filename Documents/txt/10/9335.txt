Techniques like Code refactoring can enhance readability.
Scripting and breakpointing is also part of this process.
Programming languages are essential for software development.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
However, readability is more than just programming style.
There exist a lot of different approaches for each of those tasks.