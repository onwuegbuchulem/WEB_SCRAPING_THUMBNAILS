Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
One approach popular for requirements analysis is Use Case analysis.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.