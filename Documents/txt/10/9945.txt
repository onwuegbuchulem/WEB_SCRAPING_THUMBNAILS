By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Programmable devices have existed for centuries.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
One approach popular for requirements analysis is Use Case analysis.