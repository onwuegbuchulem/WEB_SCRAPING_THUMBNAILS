In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Normally the first step in debugging is to attempt to reproduce the problem.
There are many approaches to the Software development process.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.