 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Programmable devices have existed for centuries.
However, readability is more than just programming style.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 Different programming languages support different styles of programming (called programming paradigms).
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.