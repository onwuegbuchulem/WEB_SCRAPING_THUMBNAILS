For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.

 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
There exist a lot of different approaches for each of those tasks.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Techniques like Code refactoring can enhance readability.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Programs were mostly entered using punched cards or paper tape.
Use of a static code analysis tool can help detect some possible problems.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.