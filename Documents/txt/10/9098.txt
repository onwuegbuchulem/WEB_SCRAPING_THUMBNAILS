Normally the first step in debugging is to attempt to reproduce the problem.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Ideally, the programming language best suited for the task at hand will be selected.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 Following a consistent programming style often helps readability.
Use of a static code analysis tool can help detect some possible problems.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Different programming languages support different styles of programming (called programming paradigms).
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.