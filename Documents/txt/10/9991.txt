While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 Following a consistent programming style often helps readability.
One approach popular for requirements analysis is Use Case analysis.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Programmable devices have existed for centuries.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.