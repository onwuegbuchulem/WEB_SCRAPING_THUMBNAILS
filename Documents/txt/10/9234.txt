For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 It is very difficult to determine what are the most popular modern programming languages.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Many applications use a mix of several languages in their construction and use.
Techniques like Code refactoring can enhance readability.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Computer programmers are those who write computer software.
However, readability is more than just programming style.
Use of a static code analysis tool can help detect some possible problems.
One approach popular for requirements analysis is Use Case analysis.