Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Code-breaking algorithms have also existed for centuries.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
There are many approaches to the Software development process.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 Following a consistent programming style often helps readability.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.