The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Normally the first step in debugging is to attempt to reproduce the problem.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Code-breaking algorithms have also existed for centuries.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.