 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Normally the first step in debugging is to attempt to reproduce the problem.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
Techniques like Code refactoring can enhance readability.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
However, readability is more than just programming style.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Programs were mostly entered using punched cards or paper tape.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.