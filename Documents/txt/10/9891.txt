By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Use of a static code analysis tool can help detect some possible problems.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Scripting and breakpointing is also part of this process.
 It is very difficult to determine what are the most popular modern programming languages.
 Following a consistent programming style often helps readability.
Techniques like Code refactoring can enhance readability.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.