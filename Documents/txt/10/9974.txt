Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Scripting and breakpointing is also part of this process.
Many applications use a mix of several languages in their construction and use.
 It is very difficult to determine what are the most popular modern programming languages.
Use of a static code analysis tool can help detect some possible problems.
 Different programming languages support different styles of programming (called programming paradigms).
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
There are many approaches to the Software development process.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Techniques like Code refactoring can enhance readability.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.