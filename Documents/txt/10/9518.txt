Many applications use a mix of several languages in their construction and use.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Use of a static code analysis tool can help detect some possible problems.
Techniques like Code refactoring can enhance readability.

Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 Following a consistent programming style often helps readability.
 Code-breaking algorithms have also existed for centuries.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.