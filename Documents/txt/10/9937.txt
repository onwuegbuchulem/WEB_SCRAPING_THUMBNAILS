Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
One approach popular for requirements analysis is Use Case analysis.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
There are many approaches to the Software development process.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Use of a static code analysis tool can help detect some possible problems.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.

Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.