In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
However, readability is more than just programming style.
 Different programming languages support different styles of programming (called programming paradigms).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Programming languages are essential for software development.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.