Ideally, the programming language best suited for the task at hand will be selected.
However, readability is more than just programming style.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Use of a static code analysis tool can help detect some possible problems.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Programs were mostly entered using punched cards or paper tape.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.