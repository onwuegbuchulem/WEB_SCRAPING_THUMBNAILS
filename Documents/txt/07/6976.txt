One approach popular for requirements analysis is Use Case analysis.
Ideally, the programming language best suited for the task at hand will be selected.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
 Computer programmers are those who write computer software.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
 Following a consistent programming style often helps readability.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Use of a static code analysis tool can help detect some possible problems.
Techniques like Code refactoring can enhance readability.