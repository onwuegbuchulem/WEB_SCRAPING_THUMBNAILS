 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Many applications use a mix of several languages in their construction and use.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 It is very difficult to determine what are the most popular modern programming languages.

 Following a consistent programming style often helps readability.
Use of a static code analysis tool can help detect some possible problems.
Integrated development environments (IDEs) aim to integrate all such help.
One approach popular for requirements analysis is Use Case analysis.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Scripting and breakpointing is also part of this process.