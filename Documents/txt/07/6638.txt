 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.

Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
 Different programming languages support different styles of programming (called programming paradigms).
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
One approach popular for requirements analysis is Use Case analysis.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Use of a static code analysis tool can help detect some possible problems.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Many applications use a mix of several languages in their construction and use.
 Programs were mostly entered using punched cards or paper tape.