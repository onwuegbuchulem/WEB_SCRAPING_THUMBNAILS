 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
It is usually easier to code in "high-level" languages than in "low-level" ones.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.

Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.