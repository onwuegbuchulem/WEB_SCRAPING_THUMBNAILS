Scripting and breakpointing is also part of this process.
 Code-breaking algorithms have also existed for centuries.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Normally the first step in debugging is to attempt to reproduce the problem.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
However, readability is more than just programming style.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.