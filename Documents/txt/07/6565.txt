Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Scripting and breakpointing is also part of this process.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Integrated development environments (IDEs) aim to integrate all such help.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.