FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Techniques like Code refactoring can enhance readability.

While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Normally the first step in debugging is to attempt to reproduce the problem.