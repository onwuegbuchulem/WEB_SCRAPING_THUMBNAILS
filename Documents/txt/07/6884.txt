FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 Following a consistent programming style often helps readability.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Use of a static code analysis tool can help detect some possible problems.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.