 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Code-breaking algorithms have also existed for centuries.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Ideally, the programming language best suited for the task at hand will be selected.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Scripting and breakpointing is also part of this process.
One approach popular for requirements analysis is Use Case analysis.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
There are many approaches to the Software development process.