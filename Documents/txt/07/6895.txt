Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.

For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.