 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Use of a static code analysis tool can help detect some possible problems.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
However, readability is more than just programming style.
Integrated development environments (IDEs) aim to integrate all such help.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.