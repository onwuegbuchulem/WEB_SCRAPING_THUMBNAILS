Also, specific user environment and usage history can make it difficult to reproduce the problem.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Computer programmers are those who write computer software.
Techniques like Code refactoring can enhance readability.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Normally the first step in debugging is to attempt to reproduce the problem.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Integrated development environments (IDEs) aim to integrate all such help.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Programs were mostly entered using punched cards or paper tape.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).