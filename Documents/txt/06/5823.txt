The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
 Programs were mostly entered using punched cards or paper tape.
Ideally, the programming language best suited for the task at hand will be selected.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
One approach popular for requirements analysis is Use Case analysis.
 Programmable devices have existed for centuries.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.