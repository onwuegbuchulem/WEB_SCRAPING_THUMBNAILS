Many applications use a mix of several languages in their construction and use.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Ideally, the programming language best suited for the task at hand will be selected.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
It is usually easier to code in "high-level" languages than in "low-level" ones.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Following a consistent programming style often helps readability.