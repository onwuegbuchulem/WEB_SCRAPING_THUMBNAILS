 Computer programmers are those who write computer software.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 Following a consistent programming style often helps readability.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Scripting and breakpointing is also part of this process.
Techniques like Code refactoring can enhance readability.
 Different programming languages support different styles of programming (called programming paradigms).
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.