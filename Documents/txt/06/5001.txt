Scripting and breakpointing is also part of this process.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Use of a static code analysis tool can help detect some possible problems.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).

However, readability is more than just programming style.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.