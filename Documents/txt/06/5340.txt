 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Many applications use a mix of several languages in their construction and use.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
One approach popular for requirements analysis is Use Case analysis.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Normally the first step in debugging is to attempt to reproduce the problem.
 Following a consistent programming style often helps readability.