 Programs were mostly entered using punched cards or paper tape.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 Different programming languages support different styles of programming (called programming paradigms).

Normally the first step in debugging is to attempt to reproduce the problem.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Programmable devices have existed for centuries.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
One approach popular for requirements analysis is Use Case analysis.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Ideally, the programming language best suited for the task at hand will be selected.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.