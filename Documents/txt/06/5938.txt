 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
There are many approaches to the Software development process.
Normally the first step in debugging is to attempt to reproduce the problem.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Programs were mostly entered using punched cards or paper tape.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Many applications use a mix of several languages in their construction and use.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.