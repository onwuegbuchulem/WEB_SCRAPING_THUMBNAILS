Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
One approach popular for requirements analysis is Use Case analysis.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.

 Different programming languages support different styles of programming (called programming paradigms).
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Computer programmers are those who write computer software.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.