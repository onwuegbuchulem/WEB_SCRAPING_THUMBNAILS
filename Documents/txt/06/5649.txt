Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Techniques like Code refactoring can enhance readability.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Programming languages are essential for software development.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.