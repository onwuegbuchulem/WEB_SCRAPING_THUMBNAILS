 Following a consistent programming style often helps readability.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Different programming languages support different styles of programming (called programming paradigms).
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.