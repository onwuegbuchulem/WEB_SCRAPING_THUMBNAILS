 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
One approach popular for requirements analysis is Use Case analysis.
Use of a static code analysis tool can help detect some possible problems.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Different programming languages support different styles of programming (called programming paradigms).
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Computer programmers are those who write computer software.
However, readability is more than just programming style.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 Code-breaking algorithms have also existed for centuries.
It is usually easier to code in "high-level" languages than in "low-level" ones.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.