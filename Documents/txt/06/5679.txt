 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Ideally, the programming language best suited for the task at hand will be selected.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 Programs were mostly entered using punched cards or paper tape.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
There exist a lot of different approaches for each of those tasks.
 Programmable devices have existed for centuries.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Integrated development environments (IDEs) aim to integrate all such help.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
Techniques like Code refactoring can enhance readability.