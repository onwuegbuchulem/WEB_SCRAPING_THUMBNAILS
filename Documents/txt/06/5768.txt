It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Programming languages are essential for software development.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
There are many approaches to the Software development process.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Many applications use a mix of several languages in their construction and use.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.