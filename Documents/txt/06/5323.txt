 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
 Code-breaking algorithms have also existed for centuries.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
However, readability is more than just programming style.
Normally the first step in debugging is to attempt to reproduce the problem.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.