 Programs were mostly entered using punched cards or paper tape.
Integrated development environments (IDEs) aim to integrate all such help.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Ideally, the programming language best suited for the task at hand will be selected.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
There are many approaches to the Software development process.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.