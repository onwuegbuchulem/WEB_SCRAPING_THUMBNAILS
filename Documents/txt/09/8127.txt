 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Techniques like Code refactoring can enhance readability.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Scripting and breakpointing is also part of this process.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Different programming languages support different styles of programming (called programming paradigms).
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
 It is very difficult to determine what are the most popular modern programming languages.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).