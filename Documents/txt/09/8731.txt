It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Programmable devices have existed for centuries.
 Code-breaking algorithms have also existed for centuries.
 Programs were mostly entered using punched cards or paper tape.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Computer programmers are those who write computer software.
Ideally, the programming language best suited for the task at hand will be selected.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.