Ideally, the programming language best suited for the task at hand will be selected.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Programs were mostly entered using punched cards or paper tape.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.

 Computer programmers are those who write computer software.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Different programming languages support different styles of programming (called programming paradigms).
It is usually easier to code in "high-level" languages than in "low-level" ones.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.