 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Following a consistent programming style often helps readability.
Normally the first step in debugging is to attempt to reproduce the problem.
Scripting and breakpointing is also part of this process.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
There exist a lot of different approaches for each of those tasks.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).