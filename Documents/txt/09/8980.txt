This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Normally the first step in debugging is to attempt to reproduce the problem.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Ideally, the programming language best suited for the task at hand will be selected.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Different programming languages support different styles of programming (called programming paradigms).
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Integrated development environments (IDEs) aim to integrate all such help.
Scripting and breakpointing is also part of this process.