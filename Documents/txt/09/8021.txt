Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Scripting and breakpointing is also part of this process.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Normally the first step in debugging is to attempt to reproduce the problem.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Use of a static code analysis tool can help detect some possible problems.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.