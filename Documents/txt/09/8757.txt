Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.

 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
However, readability is more than just programming style.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Scripting and breakpointing is also part of this process.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Programmable devices have existed for centuries.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.