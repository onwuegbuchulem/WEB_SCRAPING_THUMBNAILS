 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Techniques like Code refactoring can enhance readability.
 Code-breaking algorithms have also existed for centuries.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Different programming languages support different styles of programming (called programming paradigms).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 Following a consistent programming style often helps readability.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.