 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Code-breaking algorithms have also existed for centuries.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 It is very difficult to determine what are the most popular modern programming languages.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Following a consistent programming style often helps readability.
Scripting and breakpointing is also part of this process.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Techniques like Code refactoring can enhance readability.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.