Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Use of a static code analysis tool can help detect some possible problems.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 Programs were mostly entered using punched cards or paper tape.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.

 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Scripting and breakpointing is also part of this process.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.