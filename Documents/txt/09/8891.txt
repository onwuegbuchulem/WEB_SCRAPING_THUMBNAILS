 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
There are many approaches to the Software development process.
 Programs were mostly entered using punched cards or paper tape.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
It is usually easier to code in "high-level" languages than in "low-level" ones.
Programming languages are essential for software development.
 Different programming languages support different styles of programming (called programming paradigms).
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 It is very difficult to determine what are the most popular modern programming languages.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
 Following a consistent programming style often helps readability.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.