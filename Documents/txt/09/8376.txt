Ideally, the programming language best suited for the task at hand will be selected.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Programmable devices have existed for centuries.
 Following a consistent programming style often helps readability.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Many applications use a mix of several languages in their construction and use.
