 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.

Scripting and breakpointing is also part of this process.
 Programs were mostly entered using punched cards or paper tape.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.