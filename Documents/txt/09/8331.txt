 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
One approach popular for requirements analysis is Use Case analysis.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Use of a static code analysis tool can help detect some possible problems.