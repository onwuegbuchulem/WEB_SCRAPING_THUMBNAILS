He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Techniques like Code refactoring can enhance readability.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Programmable devices have existed for centuries.

Use of a static code analysis tool can help detect some possible problems.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.