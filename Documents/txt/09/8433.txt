Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Normally the first step in debugging is to attempt to reproduce the problem.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Integrated development environments (IDEs) aim to integrate all such help.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.