Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Many applications use a mix of several languages in their construction and use.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Techniques like Code refactoring can enhance readability.