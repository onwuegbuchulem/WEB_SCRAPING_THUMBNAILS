Scripting and breakpointing is also part of this process.
Normally the first step in debugging is to attempt to reproduce the problem.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
One approach popular for requirements analysis is Use Case analysis.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Different programming languages support different styles of programming (called programming paradigms).
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Techniques like Code refactoring can enhance readability.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.