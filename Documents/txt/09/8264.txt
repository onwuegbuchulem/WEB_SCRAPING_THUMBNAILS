 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Normally the first step in debugging is to attempt to reproduce the problem.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
However, readability is more than just programming style.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Techniques like Code refactoring can enhance readability.

Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.