 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Normally the first step in debugging is to attempt to reproduce the problem.
Integrated development environments (IDEs) aim to integrate all such help.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
It is usually easier to code in "high-level" languages than in "low-level" ones.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Scripting and breakpointing is also part of this process.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.