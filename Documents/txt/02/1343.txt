 Following a consistent programming style often helps readability.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Different programming languages support different styles of programming (called programming paradigms).
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Normally the first step in debugging is to attempt to reproduce the problem.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
One approach popular for requirements analysis is Use Case analysis.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.