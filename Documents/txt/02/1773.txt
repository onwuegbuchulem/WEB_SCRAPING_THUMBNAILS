 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
However, readability is more than just programming style.
 Following a consistent programming style often helps readability.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
There are many approaches to the Software development process.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Programs were mostly entered using punched cards or paper tape.