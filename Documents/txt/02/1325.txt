Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Ideally, the programming language best suited for the task at hand will be selected.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
However, readability is more than just programming style.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
There exist a lot of different approaches for each of those tasks.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Programmable devices have existed for centuries.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
It is usually easier to code in "high-level" languages than in "low-level" ones.