Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Use of a static code analysis tool can help detect some possible problems.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
One approach popular for requirements analysis is Use Case analysis.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.

 Code-breaking algorithms have also existed for centuries.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.