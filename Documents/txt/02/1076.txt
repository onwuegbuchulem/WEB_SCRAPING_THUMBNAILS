 Code-breaking algorithms have also existed for centuries.
Use of a static code analysis tool can help detect some possible problems.

Scripting and breakpointing is also part of this process.
 Following a consistent programming style often helps readability.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Techniques like Code refactoring can enhance readability.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Programmable devices have existed for centuries.
Many applications use a mix of several languages in their construction and use.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.