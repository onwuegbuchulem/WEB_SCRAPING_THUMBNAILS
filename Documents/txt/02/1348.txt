Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Programs were mostly entered using punched cards or paper tape.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Many applications use a mix of several languages in their construction and use.
 Following a consistent programming style often helps readability.
 It is very difficult to determine what are the most popular modern programming languages.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
One approach popular for requirements analysis is Use Case analysis.
There exist a lot of different approaches for each of those tasks.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).