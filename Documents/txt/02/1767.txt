In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Ideally, the programming language best suited for the task at hand will be selected.
One approach popular for requirements analysis is Use Case analysis.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 Different programming languages support different styles of programming (called programming paradigms).
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.