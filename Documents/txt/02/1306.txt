However, readability is more than just programming style.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Scripting and breakpointing is also part of this process.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Programs were mostly entered using punched cards or paper tape.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Different programming languages support different styles of programming (called programming paradigms).
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Integrated development environments (IDEs) aim to integrate all such help.