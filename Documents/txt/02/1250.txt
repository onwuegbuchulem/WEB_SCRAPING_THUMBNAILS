Many applications use a mix of several languages in their construction and use.
Programming languages are essential for software development.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Following a consistent programming style often helps readability.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Techniques like Code refactoring can enhance readability.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.