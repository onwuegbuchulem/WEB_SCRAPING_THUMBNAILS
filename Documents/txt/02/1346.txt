Normally the first step in debugging is to attempt to reproduce the problem.
Techniques like Code refactoring can enhance readability.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Scripting and breakpointing is also part of this process.
 Different programming languages support different styles of programming (called programming paradigms).
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.

 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.