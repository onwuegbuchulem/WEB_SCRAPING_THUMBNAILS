Many applications use a mix of several languages in their construction and use.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 Programmable devices have existed for centuries.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.