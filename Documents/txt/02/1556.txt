Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Different programming languages support different styles of programming (called programming paradigms).
Ideally, the programming language best suited for the task at hand will be selected.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
One approach popular for requirements analysis is Use Case analysis.
However, readability is more than just programming style.
Many applications use a mix of several languages in their construction and use.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.