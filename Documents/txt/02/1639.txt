Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Techniques like Code refactoring can enhance readability.