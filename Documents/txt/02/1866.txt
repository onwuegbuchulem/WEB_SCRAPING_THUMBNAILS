Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
There are many approaches to the Software development process.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Following a consistent programming style often helps readability.
 Computer programmers are those who write computer software.

For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.