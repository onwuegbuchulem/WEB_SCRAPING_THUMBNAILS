However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
There are many approaches to the Software development process.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
It is usually easier to code in "high-level" languages than in "low-level" ones.