Normally the first step in debugging is to attempt to reproduce the problem.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Ideally, the programming language best suited for the task at hand will be selected.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Programmable devices have existed for centuries.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.