Many applications use a mix of several languages in their construction and use.

Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Techniques like Code refactoring can enhance readability.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 It is very difficult to determine what are the most popular modern programming languages.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Following a consistent programming style often helps readability.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Also, specific user environment and usage history can make it difficult to reproduce the problem.