Scripting and breakpointing is also part of this process.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.

Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Different programming languages support different styles of programming (called programming paradigms).
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.