 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 It is very difficult to determine what are the most popular modern programming languages.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Many applications use a mix of several languages in their construction and use.
Ideally, the programming language best suited for the task at hand will be selected.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.

There exist a lot of different approaches for each of those tasks.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.