 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Many applications use a mix of several languages in their construction and use.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
One approach popular for requirements analysis is Use Case analysis.