 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 Code-breaking algorithms have also existed for centuries.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Many applications use a mix of several languages in their construction and use.
However, readability is more than just programming style.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Following a consistent programming style often helps readability.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 Programmable devices have existed for centuries.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 Programs were mostly entered using punched cards or paper tape.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.