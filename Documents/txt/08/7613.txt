 Programs were mostly entered using punched cards or paper tape.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Use of a static code analysis tool can help detect some possible problems.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.