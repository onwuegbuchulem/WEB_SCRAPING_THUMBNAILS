 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Programs were mostly entered using punched cards or paper tape.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
Scripting and breakpointing is also part of this process.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
It is usually easier to code in "high-level" languages than in "low-level" ones.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.