Ideally, the programming language best suited for the task at hand will be selected.
 Following a consistent programming style often helps readability.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Programming languages are essential for software development.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Computer programmers are those who write computer software.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.