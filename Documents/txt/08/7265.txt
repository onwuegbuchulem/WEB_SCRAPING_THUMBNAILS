In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
There are many approaches to the Software development process.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Use of a static code analysis tool can help detect some possible problems.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Integrated development environments (IDEs) aim to integrate all such help.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.