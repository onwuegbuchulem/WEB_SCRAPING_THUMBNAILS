However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.

Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Normally the first step in debugging is to attempt to reproduce the problem.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Programming languages are essential for software development.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).