 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
There are many approaches to the Software development process.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.

Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
There exist a lot of different approaches for each of those tasks.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.