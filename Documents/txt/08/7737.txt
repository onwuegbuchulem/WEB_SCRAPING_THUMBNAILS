Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Programs were mostly entered using punched cards or paper tape.

 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Ideally, the programming language best suited for the task at hand will be selected.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Integrated development environments (IDEs) aim to integrate all such help.