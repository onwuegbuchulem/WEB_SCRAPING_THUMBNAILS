
The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
One approach popular for requirements analysis is Use Case analysis.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Techniques like Code refactoring can enhance readability.
 Different programming languages support different styles of programming (called programming paradigms).
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Programming languages are essential for software development.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Code-breaking algorithms have also existed for centuries.