Techniques like Code refactoring can enhance readability.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Ideally, the programming language best suited for the task at hand will be selected.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
One approach popular for requirements analysis is Use Case analysis.
However, readability is more than just programming style.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 Programs were mostly entered using punched cards or paper tape.