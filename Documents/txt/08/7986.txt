 It is very difficult to determine what are the most popular modern programming languages.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.

Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Many applications use a mix of several languages in their construction and use.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Integrated development environments (IDEs) aim to integrate all such help.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Different programming languages support different styles of programming (called programming paradigms).
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.