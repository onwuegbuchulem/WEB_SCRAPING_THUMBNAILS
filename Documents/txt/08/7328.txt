Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Following a consistent programming style often helps readability.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Programs were mostly entered using punched cards or paper tape.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Scripting and breakpointing is also part of this process.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).