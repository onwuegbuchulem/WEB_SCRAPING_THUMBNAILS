A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Use of a static code analysis tool can help detect some possible problems.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Ideally, the programming language best suited for the task at hand will be selected.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
 Computer programmers are those who write computer software.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Integrated development environments (IDEs) aim to integrate all such help.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Following a consistent programming style often helps readability.