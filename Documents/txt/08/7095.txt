 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
However, readability is more than just programming style.
Normally the first step in debugging is to attempt to reproduce the problem.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
There exist a lot of different approaches for each of those tasks.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Different programming languages support different styles of programming (called programming paradigms).
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
It is usually easier to code in "high-level" languages than in "low-level" ones.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.