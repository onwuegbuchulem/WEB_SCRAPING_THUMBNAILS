 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Many applications use a mix of several languages in their construction and use.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Use of a static code analysis tool can help detect some possible problems.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.