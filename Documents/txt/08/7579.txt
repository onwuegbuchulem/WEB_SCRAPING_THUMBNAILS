It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
 Following a consistent programming style often helps readability.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Programmable devices have existed for centuries.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Techniques like Code refactoring can enhance readability.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Different programming languages support different styles of programming (called programming paradigms).