He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 It is very difficult to determine what are the most popular modern programming languages.
However, readability is more than just programming style.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Techniques like Code refactoring can enhance readability.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Code-breaking algorithms have also existed for centuries.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Ideally, the programming language best suited for the task at hand will be selected.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.