FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
One approach popular for requirements analysis is Use Case analysis.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Many applications use a mix of several languages in their construction and use.
Use of a static code analysis tool can help detect some possible problems.