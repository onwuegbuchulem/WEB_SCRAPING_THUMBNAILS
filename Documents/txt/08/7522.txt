 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 It is very difficult to determine what are the most popular modern programming languages.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Programmable devices have existed for centuries.
Techniques like Code refactoring can enhance readability.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).