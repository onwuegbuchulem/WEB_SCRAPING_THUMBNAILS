By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
 It is very difficult to determine what are the most popular modern programming languages.
 Code-breaking algorithms have also existed for centuries.
Scripting and breakpointing is also part of this process.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Ideally, the programming language best suited for the task at hand will be selected.
Many applications use a mix of several languages in their construction and use.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Integrated development environments (IDEs) aim to integrate all such help.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Different programming languages support different styles of programming (called programming paradigms).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.