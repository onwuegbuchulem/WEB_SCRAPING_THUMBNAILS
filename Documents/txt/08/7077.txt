 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Normally the first step in debugging is to attempt to reproduce the problem.
 Different programming languages support different styles of programming (called programming paradigms).
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.