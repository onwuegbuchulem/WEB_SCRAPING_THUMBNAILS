Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Programs were mostly entered using punched cards or paper tape.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Following a consistent programming style often helps readability.
 It is very difficult to determine what are the most popular modern programming languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Use of a static code analysis tool can help detect some possible problems.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Techniques like Code refactoring can enhance readability.