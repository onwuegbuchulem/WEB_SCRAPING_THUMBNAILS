 Programmable devices have existed for centuries.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.

By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Normally the first step in debugging is to attempt to reproduce the problem.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
There exist a lot of different approaches for each of those tasks.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Scripting and breakpointing is also part of this process.