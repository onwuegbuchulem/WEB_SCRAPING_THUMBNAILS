 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Ideally, the programming language best suited for the task at hand will be selected.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
However, readability is more than just programming style.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
One approach popular for requirements analysis is Use Case analysis.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Programs were mostly entered using punched cards or paper tape.