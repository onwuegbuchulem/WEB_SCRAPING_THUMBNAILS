 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Code-breaking algorithms have also existed for centuries.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Programming languages are essential for software development.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
There are many approaches to the Software development process.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Following a consistent programming style often helps readability.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
It is usually easier to code in "high-level" languages than in "low-level" ones.