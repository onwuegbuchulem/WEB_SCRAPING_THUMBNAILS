Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Programmable devices have existed for centuries.
Ideally, the programming language best suited for the task at hand will be selected.
Normally the first step in debugging is to attempt to reproduce the problem.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 It is very difficult to determine what are the most popular modern programming languages.

Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Also, specific user environment and usage history can make it difficult to reproduce the problem.