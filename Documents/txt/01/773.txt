The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Programmable devices have existed for centuries.
Programming languages are essential for software development.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Use of a static code analysis tool can help detect some possible problems.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Different programming languages support different styles of programming (called programming paradigms).
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
One approach popular for requirements analysis is Use Case analysis.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.