For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Use of a static code analysis tool can help detect some possible problems.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Ideally, the programming language best suited for the task at hand will be selected.
 Programs were mostly entered using punched cards or paper tape.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Integrated development environments (IDEs) aim to integrate all such help.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.