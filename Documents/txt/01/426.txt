 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Programming languages are essential for software development.
Integrated development environments (IDEs) aim to integrate all such help.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 It is very difficult to determine what are the most popular modern programming languages.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.