 Programs were mostly entered using punched cards or paper tape.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
However, readability is more than just programming style.
Techniques like Code refactoring can enhance readability.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Different programming languages support different styles of programming (called programming paradigms).
 It is very difficult to determine what are the most popular modern programming languages.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.