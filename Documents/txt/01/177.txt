 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
One approach popular for requirements analysis is Use Case analysis.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 Following a consistent programming style often helps readability.
Programming languages are essential for software development.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.