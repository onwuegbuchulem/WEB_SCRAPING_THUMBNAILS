FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Programmable devices have existed for centuries.
There are many approaches to the Software development process.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Different programming languages support different styles of programming (called programming paradigms).
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
One approach popular for requirements analysis is Use Case analysis.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.