The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Techniques like Code refactoring can enhance readability.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Following a consistent programming style often helps readability.
 Programmable devices have existed for centuries.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
There exist a lot of different approaches for each of those tasks.
Ideally, the programming language best suited for the task at hand will be selected.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Code-breaking algorithms have also existed for centuries.
 Different programming languages support different styles of programming (called programming paradigms).
One approach popular for requirements analysis is Use Case analysis.