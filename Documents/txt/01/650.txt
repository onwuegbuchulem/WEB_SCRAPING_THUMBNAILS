Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Use of a static code analysis tool can help detect some possible problems.
Many applications use a mix of several languages in their construction and use.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Integrated development environments (IDEs) aim to integrate all such help.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Programming languages are essential for software development.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Normally the first step in debugging is to attempt to reproduce the problem.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).