Ideally, the programming language best suited for the task at hand will be selected.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 Following a consistent programming style often helps readability.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Techniques like Code refactoring can enhance readability.
There exist a lot of different approaches for each of those tasks.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Normally the first step in debugging is to attempt to reproduce the problem.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 Different programming languages support different styles of programming (called programming paradigms).
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.