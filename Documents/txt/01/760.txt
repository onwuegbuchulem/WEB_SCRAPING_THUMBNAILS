Programming languages are essential for software development.
 Following a consistent programming style often helps readability.
It is usually easier to code in "high-level" languages than in "low-level" ones.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Many applications use a mix of several languages in their construction and use.
 Programs were mostly entered using punched cards or paper tape.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.