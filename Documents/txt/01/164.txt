 Programs were mostly entered using punched cards or paper tape.
Many applications use a mix of several languages in their construction and use.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
There are many approaches to the Software development process.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Different programming languages support different styles of programming (called programming paradigms).
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.