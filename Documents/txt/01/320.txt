FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Code-breaking algorithms have also existed for centuries.