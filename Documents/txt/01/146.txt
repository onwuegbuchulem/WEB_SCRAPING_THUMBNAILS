Normally the first step in debugging is to attempt to reproduce the problem.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Ideally, the programming language best suited for the task at hand will be selected.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.

Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Following a consistent programming style often helps readability.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
One approach popular for requirements analysis is Use Case analysis.