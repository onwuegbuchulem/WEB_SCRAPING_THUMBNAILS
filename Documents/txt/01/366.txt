This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
One approach popular for requirements analysis is Use Case analysis.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.