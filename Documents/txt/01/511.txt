Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.

 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
 It is very difficult to determine what are the most popular modern programming languages.
One approach popular for requirements analysis is Use Case analysis.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.