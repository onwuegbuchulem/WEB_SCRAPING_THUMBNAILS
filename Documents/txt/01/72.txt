While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.

 Programmable devices have existed for centuries.
One approach popular for requirements analysis is Use Case analysis.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Normally the first step in debugging is to attempt to reproduce the problem.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
There are many approaches to the Software development process.