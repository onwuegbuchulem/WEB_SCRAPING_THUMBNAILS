Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
There exist a lot of different approaches for each of those tasks.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Integrated development environments (IDEs) aim to integrate all such help.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Many applications use a mix of several languages in their construction and use.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Normally the first step in debugging is to attempt to reproduce the problem.
 Following a consistent programming style often helps readability.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.