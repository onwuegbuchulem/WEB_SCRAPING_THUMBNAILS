 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Normally the first step in debugging is to attempt to reproduce the problem.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Following a consistent programming style often helps readability.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Techniques like Code refactoring can enhance readability.
Scripting and breakpointing is also part of this process.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.