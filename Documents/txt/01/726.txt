 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Programmable devices have existed for centuries.
However, readability is more than just programming style.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
One approach popular for requirements analysis is Use Case analysis.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Many applications use a mix of several languages in their construction and use.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
There exist a lot of different approaches for each of those tasks.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.