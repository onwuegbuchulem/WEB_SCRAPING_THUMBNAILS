The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
One approach popular for requirements analysis is Use Case analysis.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Use of a static code analysis tool can help detect some possible problems.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
However, readability is more than just programming style.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
There are many approaches to the Software development process.
Techniques like Code refactoring can enhance readability.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.