 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 Computer programmers are those who write computer software.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
However, readability is more than just programming style.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.