 Following a consistent programming style often helps readability.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Scripting and breakpointing is also part of this process.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Techniques like Code refactoring can enhance readability.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Use of a static code analysis tool can help detect some possible problems.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.