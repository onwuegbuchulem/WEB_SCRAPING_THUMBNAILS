 Programs were mostly entered using punched cards or paper tape.
 Code-breaking algorithms have also existed for centuries.
However, readability is more than just programming style.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Normally the first step in debugging is to attempt to reproduce the problem.
 Different programming languages support different styles of programming (called programming paradigms).
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 It is very difficult to determine what are the most popular modern programming languages.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.