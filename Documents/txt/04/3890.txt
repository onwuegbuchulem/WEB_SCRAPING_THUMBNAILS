 Programs were mostly entered using punched cards or paper tape.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
One approach popular for requirements analysis is Use Case analysis.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Normally the first step in debugging is to attempt to reproduce the problem.