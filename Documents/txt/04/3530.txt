 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Ideally, the programming language best suited for the task at hand will be selected.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Use of a static code analysis tool can help detect some possible problems.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Programs were mostly entered using punched cards or paper tape.
Many applications use a mix of several languages in their construction and use.
 Following a consistent programming style often helps readability.