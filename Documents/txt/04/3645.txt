Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Different programming languages support different styles of programming (called programming paradigms).
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
However, readability is more than just programming style.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Programs were mostly entered using punched cards or paper tape.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Ideally, the programming language best suited for the task at hand will be selected.
Use of a static code analysis tool can help detect some possible problems.
 Programmable devices have existed for centuries.