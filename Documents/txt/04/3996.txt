However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Ideally, the programming language best suited for the task at hand will be selected.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Normally the first step in debugging is to attempt to reproduce the problem.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Programs were mostly entered using punched cards or paper tape.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.