Techniques like Code refactoring can enhance readability.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 Different programming languages support different styles of programming (called programming paradigms).
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Scripting and breakpointing is also part of this process.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.