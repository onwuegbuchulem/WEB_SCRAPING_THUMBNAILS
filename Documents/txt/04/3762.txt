Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
There are many approaches to the Software development process.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Different programming languages support different styles of programming (called programming paradigms).
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Integrated development environments (IDEs) aim to integrate all such help.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Techniques like Code refactoring can enhance readability.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).