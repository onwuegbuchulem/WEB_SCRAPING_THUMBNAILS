Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Many applications use a mix of several languages in their construction and use.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 Programmable devices have existed for centuries.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Normally the first step in debugging is to attempt to reproduce the problem.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.

Scripting and breakpointing is also part of this process.