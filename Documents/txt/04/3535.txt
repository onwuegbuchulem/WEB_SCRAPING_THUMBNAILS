Unreadable code often leads to bugs, inefficiencies, and duplicated code.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Use of a static code analysis tool can help detect some possible problems.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Different programming languages support different styles of programming (called programming paradigms).
There exist a lot of different approaches for each of those tasks.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.

It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.