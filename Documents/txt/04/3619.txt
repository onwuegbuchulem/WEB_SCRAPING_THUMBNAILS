 Programs were mostly entered using punched cards or paper tape.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
One approach popular for requirements analysis is Use Case analysis.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Integrated development environments (IDEs) aim to integrate all such help.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Many applications use a mix of several languages in their construction and use.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
However, readability is more than just programming style.