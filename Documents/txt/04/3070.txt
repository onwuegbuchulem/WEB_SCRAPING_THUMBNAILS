It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Normally the first step in debugging is to attempt to reproduce the problem.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
There are many approaches to the Software development process.

Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
There exist a lot of different approaches for each of those tasks.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Techniques like Code refactoring can enhance readability.