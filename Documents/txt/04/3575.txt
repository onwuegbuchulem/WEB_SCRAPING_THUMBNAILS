Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Use of a static code analysis tool can help detect some possible problems.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
Programming languages are essential for software development.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Scripting and breakpointing is also part of this process.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Different programming languages support different styles of programming (called programming paradigms).
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
However, readability is more than just programming style.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.