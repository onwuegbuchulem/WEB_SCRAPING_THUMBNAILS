Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.

 Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Normally the first step in debugging is to attempt to reproduce the problem.
There exist a lot of different approaches for each of those tasks.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
 Different programming languages support different styles of programming (called programming paradigms).
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.