Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Different programming languages support different styles of programming (called programming paradigms).
 Code-breaking algorithms have also existed for centuries.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 Following a consistent programming style often helps readability.
 Computer programmers are those who write computer software.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
