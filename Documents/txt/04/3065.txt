Integrated development environments (IDEs) aim to integrate all such help.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
However, readability is more than just programming style.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Ideally, the programming language best suited for the task at hand will be selected.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
 Programmable devices have existed for centuries.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
There exist a lot of different approaches for each of those tasks.
Techniques like Code refactoring can enhance readability.