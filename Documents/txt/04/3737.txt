The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Programming languages are essential for software development.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Different programming languages support different styles of programming (called programming paradigms).
Many applications use a mix of several languages in their construction and use.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 It is very difficult to determine what are the most popular modern programming languages.
Techniques like Code refactoring can enhance readability.
 Programs were mostly entered using punched cards or paper tape.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.