However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Following a consistent programming style often helps readability.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.

 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Different programming languages support different styles of programming (called programming paradigms).