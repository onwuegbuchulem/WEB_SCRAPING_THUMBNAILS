However, readability is more than just programming style.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.

 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.