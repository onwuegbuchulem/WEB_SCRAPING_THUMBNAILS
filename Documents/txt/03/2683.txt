Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
 Different programming languages support different styles of programming (called programming paradigms).
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Programmers typically use high-level programming languages that are more easily intelligible to humans than machine code, which is directly executed by the central processing unit.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
Ideally, the programming language best suited for the task at hand will be selected.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Use of a static code analysis tool can help detect some possible problems.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.