 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Programming languages are essential for software development.
Techniques like Code refactoring can enhance readability.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
One approach popular for requirements analysis is Use Case analysis.
 Code-breaking algorithms have also existed for centuries.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Integrated development environments (IDEs) aim to integrate all such help.
Normally the first step in debugging is to attempt to reproduce the problem.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.