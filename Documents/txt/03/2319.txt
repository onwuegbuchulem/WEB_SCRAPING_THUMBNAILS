The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Normally the first step in debugging is to attempt to reproduce the problem.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Integrated development environments (IDEs) aim to integrate all such help.