 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Use of a static code analysis tool can help detect some possible problems.
 Programs were mostly entered using punched cards or paper tape.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
Integrated development environments (IDEs) aim to integrate all such help.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Computer programmers are those who write computer software.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
 Programmable devices have existed for centuries.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.