Ideally, the programming language best suited for the task at hand will be selected.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Programmable devices have existed for centuries.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Following a consistent programming style often helps readability.
 Programs were mostly entered using punched cards or paper tape.
Many applications use a mix of several languages in their construction and use.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Scripting and breakpointing is also part of this process.