Normally the first step in debugging is to attempt to reproduce the problem.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.

 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
However, readability is more than just programming style.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.