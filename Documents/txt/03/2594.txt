Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Different programming languages support different styles of programming (called programming paradigms).
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
However, readability is more than just programming style.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Ideally, the programming language best suited for the task at hand will be selected.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.