 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.

However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Techniques like Code refactoring can enhance readability.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
One approach popular for requirements analysis is Use Case analysis.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
 Different programming languages support different styles of programming (called programming paradigms).
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
 Programmable devices have existed for centuries.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.