 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
However, readability is more than just programming style.
Ideally, the programming language best suited for the task at hand will be selected.
Use of a static code analysis tool can help detect some possible problems.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
 Computer programmers are those who write computer software.
 Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Programmable devices have existed for centuries.
