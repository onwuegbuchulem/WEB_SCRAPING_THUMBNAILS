By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
 Following a consistent programming style often helps readability.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Integrated development environments (IDEs) aim to integrate all such help.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Different programming languages support different styles of programming (called programming paradigms).
Normally the first step in debugging is to attempt to reproduce the problem.
 Programs were mostly entered using punched cards or paper tape.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.