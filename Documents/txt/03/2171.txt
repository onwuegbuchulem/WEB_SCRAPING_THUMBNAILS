 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Programming languages are essential for software development.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Integrated development environments (IDEs) aim to integrate all such help.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.