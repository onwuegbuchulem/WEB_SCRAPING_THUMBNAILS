A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Use of a static code analysis tool can help detect some possible problems.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Integrated development environments (IDEs) aim to integrate all such help.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.