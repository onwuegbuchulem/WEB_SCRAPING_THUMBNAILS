It involves designing and implementing algorithms, step-by-step specifications of procedures, by writing code in one or more programming languages.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Proficient programming usually requires expertise in several different subjects, including knowledge of the application domain, details of programming languages and generic code libraries, specialized algorithms, and formal logic.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
One approach popular for requirements analysis is Use Case analysis.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).