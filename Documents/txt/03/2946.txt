While these are sometimes considered programming, often the term software development is used for this larger overall process – with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
There are many approaches to the Software development process.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.

However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.