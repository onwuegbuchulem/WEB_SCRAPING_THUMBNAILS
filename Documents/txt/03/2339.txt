Normally the first step in debugging is to attempt to reproduce the problem.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
While these are sometimes considered programming, often the term software development is used for this larger overall process â€“ with the terms programming, implementation, and coding reserved for the writing and editing of code per se.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.

The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
 Different programming languages support different styles of programming (called programming paradigms).
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
Integrated development environments (IDEs) aim to integrate all such help.
However, readability is more than just programming style.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.