 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 Different programming languages support different styles of programming (called programming paradigms).
 Code-breaking algorithms have also existed for centuries.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
However, readability is more than just programming style.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
One approach popular for requirements analysis is Use Case analysis.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Integrated development environments (IDEs) aim to integrate all such help.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
Ideally, the programming language best suited for the task at hand will be selected.