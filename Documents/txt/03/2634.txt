 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
It is usually easier to code in "high-level" languages than in "low-level" ones.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 Programs were mostly entered using punched cards or paper tape.
 Auxiliary tasks accompanying and related to programming include analyzing requirements, testing, debugging (investigating and fixing problems), implementation of build systems, and management of derived artifacts, such as programs' machine code.
 Programmable devices have existed for centuries.
Many applications use a mix of several languages in their construction and use.
Use of a static code analysis tool can help detect some possible problems.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).

 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Techniques like Code refactoring can enhance readability.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.