 Following a consistent programming style often helps readability.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.