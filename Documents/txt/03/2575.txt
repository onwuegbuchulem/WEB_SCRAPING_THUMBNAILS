Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
 Different programming languages support different styles of programming (called programming paradigms).
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Sometimes software development is known as software engineering, especially when it employs formal methods or follows an engineering design process.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
 The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.

 Following a consistent programming style often helps readability.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.