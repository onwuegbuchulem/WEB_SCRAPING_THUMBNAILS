Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
To produce machine code, the source code must either be compiled or transpiled.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process â€“ whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Techniques like Code refactoring can enhance readability.
Ideally, the programming language best suited for the task at hand will be selected.
Compiling takes the source code from a low-level programming language and converts it into machine code.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
 Different programming languages support different styles of programming (called programming paradigms).
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.