Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Use of a static code analysis tool can help detect some possible problems.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Techniques like Code refactoring can enhance readability.
Normally the first step in debugging is to attempt to reproduce the problem.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Integrated development environments (IDEs) aim to integrate all such help.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).