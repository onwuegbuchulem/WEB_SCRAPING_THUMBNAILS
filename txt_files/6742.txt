Ideally, the programming language best suited for the task at hand will be selected.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
Normally the first step in debugging is to attempt to reproduce the problem.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process â€“ whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
 Following a consistent programming style often helps readability.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
However, readability is more than just programming style.