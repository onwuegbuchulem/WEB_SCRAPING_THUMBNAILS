However, readability is more than just programming style.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process – whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Normally the first step in debugging is to attempt to reproduce the problem.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Ideally, the programming language best suited for the task at hand will be selected.
Relatedly, software engineering combines engineering techniques and principles with software development.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
One approach popular for requirements analysis is Use Case analysis.
Use of a static code analysis tool can help detect some possible problems.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 Following a consistent programming style often helps readability.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.