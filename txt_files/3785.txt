Many applications use a mix of several languages in their construction and use.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Techniques like Code refactoring can enhance readability.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
To produce machine code, the source code must either be compiled or transpiled.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Integrated development environments (IDEs) aim to integrate all such help.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
Normally the first step in debugging is to attempt to reproduce the problem.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.