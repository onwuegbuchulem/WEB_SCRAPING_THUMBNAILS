Normally the first step in debugging is to attempt to reproduce the problem.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Integrated development environments (IDEs) aim to integrate all such help.
There are many approaches to the Software development process.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Normally the first step in debugging is to attempt to reproduce the problem.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process â€“ whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
Relatedly, software engineering combines engineering techniques and principles with software development.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.