Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
There are many approaches to the Software development process.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Integrated development environments (IDEs) aim to integrate all such help.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
Ideally, the programming language best suited for the task at hand will be selected.
To produce machine code, the source code must either be compiled or transpiled.
Many applications use a mix of several languages in their construction and use.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
 Code-breaking algorithms have also existed for centuries.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Scripting and breakpointing is also part of this process.