However, readability is more than just programming style.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Normally the first step in debugging is to attempt to reproduce the problem.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Normally the first step in debugging is to attempt to reproduce the problem.
There exist a lot of different approaches for each of those tasks.
Integrated development environments (IDEs) aim to integrate all such help.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.