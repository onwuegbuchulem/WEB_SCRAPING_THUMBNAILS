Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Compiling takes the source code from a low-level programming language and converts it into machine code.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
This is interpreted into machine code.
Use of a static code analysis tool can help detect some possible problems.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Relatedly, software engineering combines engineering techniques and principles with software development.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.