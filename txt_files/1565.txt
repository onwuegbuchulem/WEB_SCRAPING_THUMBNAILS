Relatedly, software engineering combines engineering techniques and principles with software development.
However, readability is more than just programming style.
Programming involves tasks such as analysis, generating algorithms, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms (usually in a particular programming language, commonly referred to as coding).
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Integrated development environments (IDEs) aim to integrate all such help.
Use of a static code analysis tool can help detect some possible problems.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.