Many applications use a mix of several languages in their construction and use.
Normally the first step in debugging is to attempt to reproduce the problem.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
There exist a lot of different approaches for each of those tasks.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Integrated development environments (IDEs) aim to integrate all such help.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
Scripting and breakpointing is also part of this process.
 Following a consistent programming style often helps readability.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.