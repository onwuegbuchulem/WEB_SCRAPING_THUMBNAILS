Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
This is interpreted into machine code.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
Many applications use a mix of several languages in their construction and use.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
However, readability is more than just programming style.
Techniques like Code refactoring can enhance readability.