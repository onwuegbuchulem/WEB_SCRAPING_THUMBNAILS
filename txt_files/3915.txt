It affects the aspects of quality above, including portability, usability and most importantly maintainability.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Relatedly, software engineering combines engineering techniques and principles with software development.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Use of a static code analysis tool can help detect some possible problems.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
This is interpreted into machine code.
 The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problems.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).