Ideally, the programming language best suited for the task at hand will be selected.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Programming involves tasks such as analysis, generating algorithms, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms (usually in a particular programming language, commonly referred to as coding).
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Normally the first step in debugging is to attempt to reproduce the problem.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
It is usually easier to code in "high-level" languages than in "low-level" ones.
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957, and many other languages were soon developedâ€”in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Many applications use a mix of several languages in their construction and use.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Compiling takes the source code from a low-level programming language and converts it into machine code.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.