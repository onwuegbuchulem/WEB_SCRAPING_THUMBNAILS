The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
Compiling takes the source code from a low-level programming language and converts it into machine code.
Techniques like Code refactoring can enhance readability.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Integrated development environments (IDEs) aim to integrate all such help.
Normally the first step in debugging is to attempt to reproduce the problem.
 Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
This is interpreted into machine code.
Many applications use a mix of several languages in their construction and use.
One approach popular for requirements analysis is Use Case analysis.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.