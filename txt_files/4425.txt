However, readability is more than just programming style.
Compiling takes the source code from a low-level programming language and converts it into machine code.
There exist a lot of different approaches for each of those tasks.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
There are many approaches to the Software development process.
This is interpreted into machine code.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Ideally, the programming language best suited for the task at hand will be selected.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Programming involves tasks such as analysis, generating algorithms, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms (usually in a particular programming language, commonly referred to as coding).
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.