For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Techniques like Code refactoring can enhance readability.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Relatedly, software engineering combines engineering techniques and principles with software development.
 New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Programs were mostly entered using punched cards or paper tape.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
