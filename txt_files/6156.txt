Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Techniques like Code refactoring can enhance readability.
It is usually easier to code in "high-level" languages than in "low-level" ones.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" â€“ a series of pasteboard cards with holes punched in them.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Normally the first step in debugging is to attempt to reproduce the problem.
Ideally, the programming language best suited for the task at hand will be selected.
Programming involves tasks such as analysis, generating algorithms, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms (usually in a particular programming language, commonly referred to as coding).
One approach popular for requirements analysis is Use Case analysis.