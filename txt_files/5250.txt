This is interpreted into machine code.
The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Ideally, the programming language best suited for the task at hand will be selected.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
One approach popular for requirements analysis is Use Case analysis.
 Following a consistent programming style often helps readability.
The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
Ideally, the programming language best suited for the task at hand will be selected.

The first compiler related tool, the A-0 System, was developed in 1952 by Grace Hopper, who also coined the term 'compiler'.