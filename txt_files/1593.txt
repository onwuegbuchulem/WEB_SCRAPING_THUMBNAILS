Many applications use a mix of several languages in their construction and use.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
This is interpreted into machine code.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
It is usually easier to code in "high-level" languages than in "low-level" ones.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Many applications use a mix of several languages in their construction and use.
 Programs were mostly entered using punched cards or paper tape.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).