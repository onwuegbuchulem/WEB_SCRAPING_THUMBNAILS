Unreadable code often leads to bugs, inefficiencies, and duplicated code.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Compiling takes the source code from a low-level programming language and converts it into machine code.
This is interpreted into machine code.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Different programming languages support different styles of programming (called programming paradigms).
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Compiling takes the source code from a low-level programming language and converts it into machine code.