In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Relatedly, software engineering combines engineering techniques and principles with software development.
Ideally, the programming language best suited for the task at hand will be selected.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.