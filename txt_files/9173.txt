One approach popular for requirements analysis is Use Case analysis.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages.
Ideally, the programming language best suited for the task at hand will be selected.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
Use of a static code analysis tool can help detect some possible problems.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
 Tasks accompanying and related to programming include testing, debugging, source code maintenance, implementation of build systems, and management of derived artifacts, such as the machine code of computer programs.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
This is interpreted into machine code.
 Programmable devices have existed for centuries.