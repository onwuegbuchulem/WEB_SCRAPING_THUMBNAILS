Relatedly, software engineering combines engineering techniques and principles with software development.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Techniques like Code refactoring can enhance readability.
Compiling takes the source code from a low-level programming language and converts it into machine code.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
 It is very difficult to determine what are the most popular modern programming languages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Many applications use a mix of several languages in their construction and use.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.