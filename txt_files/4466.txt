The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process – whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
Scripting and breakpointing is also part of this process.
Normally the first step in debugging is to attempt to reproduce the problem.
This is interpreted into machine code.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
This is interpreted into machine code.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
 A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
To produce machine code, the source code must either be compiled or transpiled.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
Ideally, the programming language best suited for the task at hand will be selected.