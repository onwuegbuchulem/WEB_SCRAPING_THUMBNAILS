Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Many applications use a mix of several languages in their construction and use.
Compiling takes the source code from a low-level programming language and converts it into machine code.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Relatedly, software engineering combines engineering techniques and principles with software development.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Use of a static code analysis tool can help detect some possible problems.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.