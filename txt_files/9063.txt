The following properties are among the most important:

 In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Techniques like Code refactoring can enhance readability.
One approach popular for requirements analysis is Use Case analysis.
Normally the first step in debugging is to attempt to reproduce the problem.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
For this purpose, algorithms are classified into orders using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.