Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
Ideally, the programming language best suited for the task at hand will be selected.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
However, readability is more than just programming style.
The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Use of a static code analysis tool can help detect some possible problems.
Programming involves tasks such as analysis, generating algorithms, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms (usually in a particular programming language, commonly referred to as coding).
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.