In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Use of a static code analysis tool can help detect some possible problems.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
 Allen Downey, in his book How To Think Like A Computer Scientist, writes:
 Many computer languages provide a mechanism to call functions provided by shared libraries.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Scripting and breakpointing is also part of this process.
In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.