Ideally, the programming language best suited for the task at hand will be selected.
Proficient programming thus usually requires expertise in several different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
Integrated development environments (IDEs) aim to integrate all such help.
However, because an assembly language is little more than a different notation for a machine language,  two machines with different instruction sets also have different assembly languages.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process â€“ whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
Compilers harnessed the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula using infix notation.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
It is usually easier to code in "high-level" languages than in "low-level" ones.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Relatedly, software engineering combines engineering techniques and principles with software development.