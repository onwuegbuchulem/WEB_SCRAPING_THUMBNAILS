Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Relatedly, software engineering combines engineering techniques and principles with software development.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
Use of a static code analysis tool can help detect some possible problems.
Compiling takes the source code from a low-level programming language and converts it into machine code.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
There are many approaches to the Software development process.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
There are many approaches to the Software development process.
Ideally, the programming language best suited for the task at hand will be selected.
 Programs were mostly entered using punched cards or paper tape.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
 Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code.