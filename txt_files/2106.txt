It is usually easier to code in "high-level" languages than in "low-level" ones.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
Later a control panel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
One approach popular for requirements analysis is Use Case analysis.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
 In the 1880s, Herman Hollerith invented the concept of storing data in machine-readable form.
Use of a static code analysis tool can help detect some possible problems.