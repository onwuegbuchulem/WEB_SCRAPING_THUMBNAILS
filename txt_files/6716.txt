Normally the first step in debugging is to attempt to reproduce the problem.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
This is interpreted into machine code.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Many applications use a mix of several languages in their construction and use.
The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
However, while these might be considered part of the programming process, often the term software development is more likely used for this larger overall process â€“ whereas the terms programming, implementation, and coding tend to be focused on the actual writing of code.
There are many approaches to the Software development process.
It is usually easier to code in "high-level" languages than in "low-level" ones.
There exist a lot of different approaches for each of those tasks.
 The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.