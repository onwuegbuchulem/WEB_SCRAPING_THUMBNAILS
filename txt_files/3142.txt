Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
There are many approaches to the Software development process.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Techniques like Code refactoring can enhance readability.
Many applications use a mix of several languages in their construction and use.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Also, those involved with software development may at times engage in reverse engineering, which is the practice of seeking to understand an existing program so as to re-implement its function in some way.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
Relatedly, software engineering combines engineering techniques and principles with software development.
Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
Techniques like Code refactoring can enhance readability.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
 Programmable devices have existed for centuries.