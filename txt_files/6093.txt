The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Programming languages are essential for software development.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Normally the first step in debugging is to attempt to reproduce the problem.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Relatedly, software engineering combines engineering techniques and principles with software development.
 It is very difficult to determine what are the most popular modern programming languages.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
 These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target varying machine instruction sets via compilation declarations and heuristics.