Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
Normally the first step in debugging is to attempt to reproduce the problem.
Compiling takes the source code from a low-level programming language and converts it into machine code.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.
One approach popular for requirements analysis is Use Case analysis.
For example, when a bug in a compiler can make it crash when parsing some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash.
 After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
It is usually easier to code in "high-level" languages than in "low-level" ones.
 Debugging is often done with IDEs. Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
Also, specific user environment and usage history can make it difficult to reproduce the problem.