Their jobs usually involve:
 Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a foreign language.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
To produce machine code, the source code must either be compiled or transpiled.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
The source code of a program is written in one or more languages that are intelligible to programmers, rather than machine code, which is directly executed by the central processing unit.
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
Relatedly, software engineering combines engineering techniques and principles with software development.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
Transpiling on the other hand, takes the source-code from a high-level programming language and converts it into bytecode.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
This is interpreted into machine code.
 Whatever the approach to development may be, the final program must satisfy some fundamental properties.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).