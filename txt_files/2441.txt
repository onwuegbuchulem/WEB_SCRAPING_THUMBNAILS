Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
Relatedly, software engineering combines engineering techniques and principles with software development.
There are many approaches to the Software development process.
However, Charles Babbage had already written his first program for the Analytical Engine in 1837.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Programming involves tasks such as analysis, generating algorithms, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms (usually in a particular programming language, commonly referred to as coding).
They are the building blocks for all software, from the simplest applications to the most sophisticated ones.
Integrated development environments (IDEs) aim to integrate all such help.
Some of these factors include:
 The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
As early as the 9th century, a programmable music sequencer was invented by the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an operating system) on a computer, often for solving a given problem.
 High-level languages made the process of developing a program simpler and more understandable, and less bound to the underlying hardware.
 Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.